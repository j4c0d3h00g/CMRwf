% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crm_functional.R
\name{crm_functional}
\alias{crm_functional}
\title{Cellwise Robust M regression with additional input arguments}
\usage{
crm_functional(
  formula,
  data,
  maxiter = 100,
  tolerance = 0.01,
  outlyingness.factor = 1,
  spadieta = seq(0.9, 0.1, -0.1),
  center = "median",
  scale = "qn",
  regtype = "MM",
  alphaLTS = NULL,
  seed = NULL,
  verbose = TRUE,
  weightfunction = "hampel",
  weightthreshold = 1,
  parameters
)
}
\arguments{
\item{data}{the data as a data frame.}

\item{maxiter}{maximum number of iterations (default is 100).}

\item{tolerance}{obtain optimal regression coefficients to within a certain tolerance (default is 0.01).}

\item{outlyingness.factor}{numeric value, larger or equal to 1 (default). Only cells are altered of cases for which the original outlyingness (before SPADIMO) is larger than outlyingness.factor * oulyingness AFTER SPADIMO. The larger this factor, the fewer cells are imputed.}

\item{spadieta}{the sparsity parameter to start internal outlying cell detection with, must be in the range [0,1] (default is seq(0.9, 0.1, -0.1)).}

\item{center}{how to center the data. A string that matches the R function to be used for centering (default is "median").}

\item{scale}{how to scale the data. Choices are "no" (no scaling) or a string matching the R function to be used for scaling (default is "qn").}

\item{regtype}{type of robust regression. Choices are "MM" (default) or "LTS".}

\item{alphaLTS}{parameter used by LTS regression. The percentage (roughly) of squared residuals whose sum will be minimized (default is 0.5).}

\item{seed}{initial seed for random generator, like .Random.seed (default is NULL).}

\item{verbose}{should output be shown during the process (default is TRUE).}

\item{weightfunction}{the weight function used in the M estimation step. (default is "hampel")}

\item{weightthreshold}{weight threshold where assigned weights lower than this threshold are classified as casewise outliers. (default is 1)}

\item{parameters}{parameters for the weight function.}

\item{formalu}{an lm-style formula object specifying which relationship to estimate.}
}
\value{
`crm_functional` returns a list object of class "`crm`" containing the following elements:
\itemize{
 \item{coefficients}{a named vector of fitted coefficients.}
 \item{fitted.values}{the fitted response values.}
 \item{residual}{the residuals, that is response minus fitted values.}
 \item{weights}{the (case) weights of the residuals.}
 \item{data.imputed}{the data as imputed by CRM.}
 \item{casewiseoutliers}{a vector that indicates the casewise outliers with `TRUE` or `FALSE`}
 \item{cellwiseoutliers}{a matrix that indicates the cellwise outliers as the (scaled) difference between
 the original data and imputed data, both scaled and centered.}
 \item{terms}{the terms object used.}
 \item{call}{the matched call.}
 \item{inputs}{the list of supplied input arguments.}
 \item{numloops}{the number of iterations.}
 \item{time}{the number of seconds passed to execute the CRM algorithm.}
}
}
\description{
Estimates coefficients by applying Cellwise Robust M (CRM) regression.
}
\details{
This function can be used as an alternative to the `crm` function of the `crmReg` package. In our function
`crm_functional` it is possible to assign additional input arguments, such that the weight function and its parameters
can be varied. This function performs the cellwise robust M (CRM) regression algorithm (Filzmoser et al., 2020) and
returns a vector of regression coefficients that is robust against vertical outliers and leverage points.
}
\references{
\insertRef{filzmoser2020cellwise}{CRMwf}
}
\seealso{
[crmReg::spadimo()], [crmReg::predict.crm], [crmReg::cellwiseheatmap], [crmReg::daprpr]
}
\author{
Jaco de Hoog
}
